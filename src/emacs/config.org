#+title: Emacs Configuration
#+author: Azizul Islam
#+email: azizul7m@gmail.com
#+OPTIONS:  toc:2
#+startup: fold
* TABLE OF CONTENT :toc:
* SETUP USE-PACKAGE WITH ELPACA
#+begin_src emacs-lisp
  ;; Integrate use-package
  (elpaca elpaca-use-package
    (elpaca-use-package-mode))
  ;; Optional: straight-like behavior
  (setq use-package-always-ensure t)

#+end_src

* BASIC UI CLEANUP
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (blink-cursor-mode -1)
  (scroll-bar-mode -1)
  (electric-pair-mode 1) ;; auto paire

  (setq scroll-margin 8)
  (setq use-dialog-box nil)
  (setq use-file-dialog nil)
  (setq make-backup-files nil)
  (setq auto-save-default nil)
  (setq locale-coding-system 'utf-8)
  (setq inhibit-startup-screen t)
  (setq visible-bell t)
  (setq scroll-step 1)
  (setq scroll-conservatively 10000)
  (setq gc-cons-threshold (* 100 1024 1024)) ;; 100MB

  (global-set-key [escape] 'keyboard-escape-quit)
  (global-set-key  (kbd "C-=") 'text-scale-increase)
  (global-set-key  (kbd "C--") 'text-scale-decrease)
  (global-set-key  (kbd "<C-wheel-up>") 'text-scale-increase)
  (global-set-key  (kbd "<C-wheel-down>") 'text-scale-decrease)
  (global-set-key  (kbd "M-j") 'consult-buffer)

  (global-display-line-numbers-mode 1)
  (global-auto-revert-mode t)  ;; Automatically show changes if the file has changed

  (setq-default tab-width t
                indent-tabs-mode nil)
  (setq-default truncate-lines t)
  (setq-default auto-fill-function nil)

  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src
* ESSENTIAL PACKAGE
#+begin_src emacs-lisp
  (use-package diminish
    :ensure t)
#+end_src

#+begin_src emacs-lisp
  (use-package async
    :config (dired-async-mode 1))
#+end_src

#+begin_src emacs-lisp
  (use-package sudo-edit)
#+end_src

#+begin_src emacs-lisp
  (use-package transient
    :ensure (:package "transient" :source nil :protocol https :inherit t :depth treeless :fetcher github :repo "magit/transient" :files ("*.el" "*.el.in" "dir" "*.info" "*.texi" "*.texinfo" "doc/dir" "doc/*.info" "doc/*.texi" "doc/*.texinfo" "lisp/*.el" "docs/dir" "docs/*.info" "docs/*.texi" "docs/*.texinfo" (:exclude ".dir-locals.el" "test.el" "tests.el" "*-test.el" "*-tests.el" "LICENSE" "README*" "*-pkg.el"))))
#+end_src

#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :if (memq window-system '(mac ns x))
  :ensure t
  :config
  (exec-path-from-shell-initialize))
#+end_src

#+begin_src emacs-lisp
(use-package hungry-delete
   :ensure t
   :defer 30
   :config (global-hungry-delete-mode))
#+end_src

* COMPLETION WITH CORFU
** CORFU
#+begin_src emacs-lisp
  (use-package corfu
    :ensure t
    :custom
    (corfu-cycle t)                 ; Allows cycling through candidates
    (corfu-auto t)
    (corfu-auto-prefix 0)
    (corfu-auto-delay 0.2)
    (corfu-popupinfo-delay '(0.2 . 0.1))
    (corfu-preview-current 'insert) ; Insert previewed candidate
    (corfu-preselect 'prompt)
    (corfu-quit-no-match 'separator)
    (corfu-on-exact-match nil)
    :bind (:map corfu-map
                ("TAB" . corfu-next)
                ([tab] . corfu-next)
                ("S-TAB" . corfu-previous)
                ([backtab] . corfu-previous)
                ("RET" . corfu-insert))
    :config
    (setq read-extended-command-predicate #'command-completion-default-include-p)
    :init
    (corfu-history-mode)
    (corfu-popupinfo-mode)
    (global-corfu-mode))

  (use-package corfu-prescient
    :ensure (:package "corfu-prescient" :source nil :protocol https :inherit t :depth treeless :fetcher github :repo "radian-software/prescient.el" :files ("corfu-prescient.el"))
    :config
    (corfu-prescient-mode))

  ;; (use-package corfu-candidate-overlay
  ;;   :ensure (:package "corfu-candidate-overlay" :source nil :protocol https :inherit t :depth treeless :url "https://code.bsdgeek.org/adam/corfu-candidate-overlay" :fetcher git :files ("*.el" "*.el.in" "dir" "*.info" "*.texi" "*.texinfo" "doc/dir" "doc/*.info" "doc/*.texi" "doc/*.texinfo" "lisp/*.el" "docs/dir" "docs/*.info" "docs/*.texi" "docs/*.texinfo" (:exclude ".dir-locals.el" "test.el" "tests.el" "*-test.el" "*-tests.el" "LICENSE" "README*" "*-pkg.el")))
  ;;   :config
  ;; (corfu-candidate-overlay-mode))

  (use-package corfu-terminal
    :ensure t
    :defer 30
    :config
    (corfu-terminal-mode)) ;;

#+end_src
** CAPE
#+begin_src emacs-lisp
  (use-package cape
    :ensure t
    :init
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-elisp-block)
    (add-to-list 'completion-at-point-functions #'cape-keyword))
#+end_src
** ELDOC
#+begin_src emacs-lisp
  (use-package eldoc-box
    :defer t
    :config
    (setq eldoc-box-max-pixel-height 450
          eldoc-box-max-pixel-width 600
          eldoc-box-show-help-tooltip t
          eldoc-box-tooltip-delay 500))
  (setq eldoc-echo-area-use-multiline-p t) ;; Allow multi-line messages
  (setq eldoc-documentation-strategy 'eldoc-documentation-compose) ;; Show LSP progress dynamically

  (with-eval-after-load 'evil
    (evil-define-key 'normal eglot-mode-map  
      "K" 'eldoc-box-help-at-point))

#+end_src
** CONSULT
#+begin_src emacs-lisp
(use-package consult
  :ensure t
  :bind (;; A recursive grep
         ("M-s M-g" . consult-grep)
         ;; Search for files names recursively
         ("M-s M-f" . consult-find)
         ;; Search through the outline (headings) of the file
         ("M-s M-o" . consult-outline)
         ;; Search the current buffer
         ("M-s M-l" . consult-line)
         ;; Switch to another buffer, or bookmarked file, or recently
         ;; opened file.
         ("M-s M-b" . consult-buffer)))
#+end_src
** EMBARK
#+begin_src emacs-lisp
(use-package embark
  :ensure t
  :bind (("C-." . embark-act)
         :map minibuffer-local-map
         ("C-c C-c" . embark-collect)
         ("C-c C-e" . embark-export)))
(use-package embark-consult
  :ensure t)
#+end_src
** MARGINALIA
#+begin_src emacs-lisp
  (use-package marginalia
    :custom
    (marginalia-max-relative-age 0)
    (marginalia-align 'right)
    :init
    (marginalia-mode 1))
#+end_src
** ORDERLESS
#+begin_src emacs-lisp
(use-package orderless
  :demand t
  :config
  (setq completion-styles '(orderless flex)
        completion-category-overrides '((eglot (styles . (orderless flex))))))
#+end_src
** WGREP
#+begin_src emacs-lisp
(use-package wgrep
  :ensure t
  :bind ( :map grep-mode-map
          ("e" . wgrep-change-to-wgrep-mode)
          ("C-x C-q" . wgrep-change-to-wgrep-mode)
          ("C-c C-c" . wgrep-finish-edit)))
(savehist-mode 1)
(recentf-mode 1)
#+end_src
** VERTICO
#+begin_src emacs-lisp
(use-package vertico
  :ensure t
  :config
  (setq vertico-cycle t)
  (setq vertico-resize nil)
  (vertico-mode 1))
#+end_src
** VERTICO-POSFRAME
#+begin_src emacs-lisp
  ;; (use-package vertico-posframe)
  ;; (setq vertico-posframe-parameters '((left-fringe . 5) (right-fringe . 5)))
  ;; (setq vertico-posframe-mode 1)
#+end_src
* DEVELOPMENT
** SNIPPETS
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :defer 10
    :bind ("M-+" . yas-insert-snippet)
    :config
    (setopt yas-snippet-dirs (append yas-snippet-dirs
                                     '("~/.notes/org/snippets")))
    (yas-global-mode +1)
    (add-to-list 'hippie-expand-try-functions-list #'yas-hippie-try-expand))

  (use-package yasnippet-snippets
    :ensure t 
    :after yasnippet)

  (use-package yasnippet-capf
    :ensure t
    :after yasnippet
    :hook ((prog-mode . yas-setup-capf)
           (text-mode . yas-setup-capf)
           (sly-mode  . yas-setup-capf))
    :bind (("C-c y" . yasnippet-capf)
           ("M-+"   . yas-insert-snippet))
    :config
    (defun yas-setup-capf ()
      (setq-local completion-at-point-functions
                  (cons 'yasnippet-capf
                        completion-at-point-functions)))
    (push 'yasnippet-capf completion-at-point-functions))
#+end_src
** FLYMAKE
#+begin_src emacs-lisp
  (use-package flymake
    :ensure nil
    :defer t
    :hook (prog-mode . flymake-mode)
    :bind (:map flymake-mode-map 
                  ("M-g f" . flymake-menu)
                  ("M-n" . 'flymake-goto-next-error)
                  ("M-p" . 'flymake-goto-prev-error)))
#+end_src
** TREE-SITTER
#+begin_src emacs-lisp
(use-package treesit-auto
  :defer t
  :custom
  (treesit-auto-install 'prompt)
  :config
  (setq treesit-auto-langs '(javascript typescript tsx json toml css html rustic))
  (global-treesit-auto-mode))
#+end_src
** LANGUAGES
*** Emmet
#+begin_src emacs-lisp
  (use-package emmet-mode
    :defer t
    :ensure t
  :mode "\\.html\\'")
#+end_src
*** Html
#+begin_src emacs-lisp
(use-package html-mode
  :ensure nil
  :defer t
  :mode "\\.html\\'")
#+end_src
*** Json
#+begin_src emacs-lisp
(use-package json-mode
  :mode
  (("\\.json\\'" . json-mode)))
#+end_src
*** Typescript 
#+begin_src emacs-lisp
    (use-package typespec-ts-mode
      :ensure (:package "typespec-ts-mode" :source nil :protocol https :inherit t :depth treeless :fetcher github :repo "pradyuman/typespec-ts-mode" :files ("*.el" "*.el.in" "dir" "*.info" "*.texi" "*.texinfo" "doc/dir" "doc/*.info" "doc/*.texi" "doc/*.texinfo" "lisp/*.el" "docs/dir" "docs/*.info" "docs/*.texi" "docs/*.texinfo" (:exclude ".dir-locals.el" "test.el" "tests.el" "*-test.el" "*-tests.el" "LICENSE" "README*" "*-pkg.el")))
      :defer t
      :mode (("\\.ts\\'"  . #'typescript-ts-mode)
             ("\\.tsx\\'" . #'tsx-ts-mode))
      :hook ((typescript-ts-mode . lsp)
             (tsx-ts-mode . lsp)))
#+end_src

*** Python
#+begin_src emacs-lisp
(use-package poetry
  :defer t
 :ensure t)
#+end_src
*** MARKDOWN MODE
#+begin_src elisp
(use-package markdown-mode
  :defer t
  :ensure t
  :config
  (setq markdown-fontify-code-blocks-natively t))
#+end_src
*** Org-Mode
#+begin_src emacs-lisp
  (use-package org
    :ensure nil
    :hook (org-mode . flyspell-mode))

#+end_src

#+begin_src emacs-lisp
  (use-package org-superstar
    :ensure t
    :defer t)
  (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
#+end_src

#+begin_src emacs-lisp
  (use-package org-super-agenda
    :ensure t
    :defer t)  
#+end_src

#+begin_src emacs-lisp
  (use-package org-modern
    :ensure t
    :defer t)
  (add-hook 'org-mode-hook #'org-modern-mode)
  (add-hook 'org-agenda-finalize-hook #'org-modern-agenda)
#+end_src

*** NIX
#+begin_src emacs-lisp
    (use-package nix-mode
     :defer t
     :mode ("\\.nix\\'" "\\.nix.in\\'"))
#+end_src
*** Rust
#+begin_src emacs-lisp
  (use-package rust-mode
    :ensure (:package "rust-mode" :source nil :protocol https :inherit t :depth treeless :repo "rust-lang/rust-mode" :fetcher github :files ("*.el" "*.el.in" "dir" "*.info" "*.texi" "*.texinfo" "doc/dir" "doc/*.info" "doc/*.texi" "doc/*.texinfo" "lisp/*.el" "docs/dir" "docs/*.info" "docs/*.texi" "docs/*.texinfo" (:exclude ".dir-locals.el" "test.el" "tests.el" "*-test.el" "*-tests.el" "LICENSE" "README*" "*-pkg.el")))
    :config
    (setq rust-format-on-save nil)) 

  (use-package rustic
    :ensure t
    :config
  (setq rustic-lsp-client 'eglot))
#+end_src

#+begin_src emacs-lisp
#+end_src
* LSP 
** LSP client
#+begin_src emacs-lisp
      (use-package lsp-mode
        :defer t
        :ensure (:host github
                       :repo "emacs-lsp/lsp-mode"
                       :files ("*.el" "clients/*.el"))
        :config
        (setq lsp-keymap-prefix "C-c l")
        (setq lsp-headerline-breadcrumb-enable nil)
        :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
               (html-mode . lsp)
               (css-mode . lsp)
               ;; if you want which-key integration
               (lsp-mode . lsp-enable-which-key-integration))
        :commands (lsp lsp-deferred))


      (with-eval-after-load 'evil
        (evil-define-key 'normal lsp-mode-map
          "K" 'eldoc-box-help-at-point))

      (use-package lsp-ui
        :after lsp-mode
        :commands lsp-ui-mode)

      (use-package lsp-treemacs
        :defer t
        :hook (treemacs-mode . lsp-treemacs-sync-mode)
        :commands lsp-treemacs-errors-list)

      ;; (use-package dap-LANGUAGE)
#+end_src
** EGLOT
#+begin_src emacs-lisp
  (use-package eglot
    :ensure nil
    :config
    (setq-default eglot-sync-connect 0
                  eglot-autoshutdown t
                  eglot-completion-style 'flex  ;; Improve Corfu + Eglot completion
                  eglot-send-changes-idle-time 0.1
                  eglot-events-buffer-config nil))
   (with-eval-after-load 'evil
    (evil-define-key 'normal eglot-mode-map
      "K" 'eldoc-box-help-at-point))
#+end_src
* EVIL MODE
#+begin_src emacs-lisp
  (use-package evil
    :init (setq evil-want-integration t
                evil-want-keybinding nil)
    :config (evil-mode 1))

  (with-eval-after-load 'evil-maps
    (define-key evil-motion-state-map (kbd "SPC") nil)
    (define-key evil-motion-state-map (kbd "K") nil)
    (define-key evil-motion-state-map (kbd "RET") nil)
    (define-key evil-motion-state-map (kbd "TAB") nil)
    (define-key evil-normal-state-map (kbd "M-.") 'embark-act)
    (define-key evil-visual-state-map (kbd "M-.") 'embark-act))
  (setq org-return-follows-link  t)

  (use-package evil-escape
    :after evil
    :init
    (setq evil-escape-key-sequence "jk"
          evil-escape-delay 0.15) ;; adjust for typing speed
    :config
    (evil-escape-mode 1))

  (use-package evil-collection
    :after evil
    :config
    (setq evil-collection-mode-list '(calendar vterm magit man eshell dired ediff help ibuffer elpaca popper-mode info))
    (evil-collection-init))
#+end_src
* KEYS
** WHICH-KEY
#+begin_src emacs-lisp
  (use-package which-key
  :ensure t
  :config (which-key-mode))
#+end_src
** GENERAL
#+begin_src emacs-lisp
    (use-package general
      :ensure t
      :demand t
      :config
      ;; Setup for evil integration and use-package keyword
      (general-evil-setup)
      (general-create-definer my/leader-keys
        :states '(normal insert visual emacs)
        :keymaps 'override
        :prefix "SPC"
        :non-normal-prefix "C-SPC"
        :global-prefix "C-SPC")

      (my/leader-keys
        "SPC" '(project-find-file :wk "Counsel M-X")
        "." '(find-file :wk "Find file")
        "u" '(universal-argument :wk "Universal argument"))
      (my/leader-keys
        "b" '(:ignore t :wk "Bookmarks/Buffers")
        "b b" '(switch-to-buffer :wk "Switch to buffer")
        "b c" '(clone-indirect-buffer :wk "Create indirect buffer copy in a split")
        "b C" '(clone-indirect-buffer-other-window :wk "Clone indirect buffer in new window")
        "b d" '(bookmark-delete :wk "Delete bookmark")
        "b i" '(ibuffer :wk "Ibuffer")
        "b k" '(kill-current-buffer :wk "Kill current buffer")
        "b K" '(kill-some-buffers :wk "Kill multiple buffers")
        "b l" '(list-bookmarks :wk "List bookmarks")
        "b m" '(bookmark-set :wk "Set bookmark")
        "b n" '(next-buffer :wk "Next buffer")
        "b ]" '(next-buffer :wk "Next buffer")
        "b p" '(previous-buffer :wk "Previous buffer")
        "b [" '(previous-buffer :wk "Previous buffer")
        "b r" '(revert-buffer :wk "Reload buffer")
        "b R" '(rename-buffer :wk "Rename buffer")
        "b s" '(basic-save-buffer :wk "Save buffer")
        "b S" '(save-some-buffers :wk "Save multiple buffers")
        "b w" '(bookmark-save :wk "Save current bookmarks to bookmark file"))
      (my/leader-keys
        "e" '(:ignore t :wk "Eshell/Evaluate")    
        "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
        "e d" '(eval-defun :wk "Evaluate defun containing or after point")
        "e e" '(eval-expression :wk "Evaluate and elisp expression")
        "e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")
        "e r" '(eval-region :wk "Evaluate elisp in region")
        "e R" '(eww-reload :which-key "Reload current page in EWW")
        "e s" '(eshell :which-key "Eshell")
        "e w" '(eww :which-key "EWW emacs web wowser"))
      (my/leader-keys
       "f" '(:ignore t :wk "Files")    
       "f c" '((lambda () (interactive)
                 (find-file "~/.config/emacs/config.org")) 
               :wk "Open emacs config.org")
       "f e" '((lambda () (interactive)
                 (dired "~/.config/emacs/")) 
               :wk "Open user-emacs-directory in dired"))
    (my/leader-keys
      "h" '(:ignore t :wk "Help")
      "h c" '(describe-char :wk "Describe character under cursor")
      "h d" '(:ignore t :wk "Emacs documentation")
      "h d a" '(about-emacs :wk "About Emacs")
      "h d d" '(view-emacs-debugging :wk "View Emacs debugging")
      "h d f" '(view-emacs-FAQ :wk "View Emacs FAQ")
      "h d m" '(info-emacs-manual :wk "The Emacs manual")
      "h d n" '(view-emacs-news :wk "View Emacs news")
      "h d o" '(describe-distribution :wk "How to obtain Emacs")
      "h d p" '(view-emacs-problems :wk "View Emacs problems")
      "h d t" '(view-emacs-todo :wk "View Emacs todo")
      "h d w" '(describe-no-warranty :wk "Describe no warranty")
      "h e" '(view-echo-area-messages :wk "View echo area messages")
      "h f" '(describe-function :wk "Describe function")
      "h F" '(describe-face :wk "Describe face")
      "h g" '(describe-gnu-project :wk "Describe GNU Project")
      "h i" '(info :wk "Info")
      "h I" '(describe-input-method :wk "Describe input method")
      "h k" '(describe-key :wk "Describe key")
      "h l" '(view-lossage :wk "Display recent keystrokes and the commands run")
      "h L" '(describe-language-environment :wk "Describe language environment")
      "h m" '(describe-mode :wk "Describe mode")
      "h r" '(:ignore t :wk "Reload")
      "h r r" '((lambda () (interactive)
                  (load-file "~/.config/emacs/init.el"))
                :wk "Reload emacs config")
      "h t" '(load-theme :wk "Load theme")
      "h v" '(describe-variable :wk "Describe variable")
      "h w" '(where-is :wk "Prints keybinding for command if set")
      "h x" '(describe-command :wk "Display full documentation for command"))
    (my/leader-keys
      "o" '(:ignore t :wk "Open")
      "o f" '(make-frame :wk "Open buffer in new frame")
      "o F" '(select-frame-by-name :wk "Select frame by name"))
    (my/leader-keys
      "t" '(:ignore t :wk "Toggle")
      "t e" '(eshell-toggle :wk "Toggle eshell")
      "t t" '(visual-line-mode :wk "Toggle truncated lines")
      "t l" '(display-line-numbers-mode :wk "Toggle line numbers"))
    (my/leader-keys
     "w" '(:ignore t :wk "Windows") ;; Window splits
     "w c" '(evil-window-delete :wk "Close window")
     "w n" '(evil-window-new :wk "New window")
     "w s" '(evil-window-split :wk "Horizontal split window")
     "w v" '(evil-window-vsplit :wk "Vertical split window")
     ;; Window motions
     "w h" '(evil-window-left :wk "Window left")
     "w j" '(evil-window-down :wk "Window down")
     "w k" '(evil-window-up :wk "Window up")
     "w l" '(evil-window-right :wk "Window right")
     "w w" '(evil-window-next :wk "Goto next window")
     ;; Move Windows
     "w H" '(buf-move-left :wk "Buffer move left")
     "w J" '(buf-move-down :wk "Buffer move down")
     "w K" '(buf-move-up :wk "Buffer move up")
     "w L" '(buf-move-right :wk "Buffer move right")
     "w m" '(maximize-window :wk "Maximize Window")
     "w -" '(minimize-window :wk "Minimize Window")
     "w =" '(balance-windows :wk "Minimize Window")
     ))
#+end_src
* FILE MANAGER
** DIRED
#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :custom ((dired-listing-switches "-agho --group-directories-first")))

  (use-package dirvish
    :init (dirvish-override-dired-mode))
#+end_src
** TREEMACS
#+begin_src emacs-lisp
  (use-package treemacs
    :ensure t
    :hook (treemacs-mode . (lambda () (display-line-numbers-mode -1)))
    :config
    (set-face-attribute 'treemacs-window-background-face nil :height 92)
    (setq treemacs-width 30
          treemacs-recenter-after-project-jump 'always
          treemacs-follow-mode nil
          treemacs-filewatch-mode nil
          treemacs-hide-gitignored-files-mode t)
    (my/leader-keys
      "t n" '(treemacs :wk "Treemacs")))


  (use-package treemacs-nerd-icons
    :config
    (treemacs-load-theme "nerd-icons"))

  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once)
    :ensure t)

#+end_src
* PROG-MODE 
#+BEGIN_SRC emacs-lisp
  (use-package prog-mode
    :ensure nil
    :defer 20
    :hook ((prog-mode . display-line-numbers-mode) ;; Enable line numbers
           (prog-mode . show-paren-mode)          ;; Highlight matching parentheses
           (prog-mode . electric-pair-mode)      ;; Automatically insert matching braces/quotes
           (prog-mode . flyspell-prog-mode)      ;; Enable spell-checking in comments/strings
           (prog-mode . hl-line-mode)      ;; Enable spell-checking in comments/strings
           (prog-mode . hs-minor-mode))          ;; Enable code folding
    :config
    (setq show-paren-delay 0)                     ;; No delay for showing matching paren
    (setq-default tab-width 4)
    (message "prog-mode customizations loaded"))
#+END_SRC
* Gptel 
#+begin_src emacs-lisp
(use-package gptel
  :ensure t
  :config
  (setq gptel-default-mode 'org-mode
        gptel-stream nil
        gptel-model 'gpt-4o)
  (setq gptel-backend
        (gptel-make-openai "Github Models"
                           :host "models.inference.ai.azure.com"
                           :endpoint "/chat/completions?api-version=2024-05-01-preview"
                           :stream t
                           :key (getenv "GITHUB_API_KEY")
                           :models '(gpt-4o)))
  (gptel-make-openai "TogetherAI"
                     :host "api.together.xyz"
                     :key (getenv "TOGETERAI_API_KEY")
                     :stream t
                     :models '(mistralai/Mixtral-8x7B-Instruct-v0.1
                               codellama/CodeLlama-13b-Instruct-hf
                               codellama/CodeLlama-34b-Instruct-hf)))

(global-set-key (kbd "C-c <return>") 'gptel-send)
#+end_src

* PROJECTILE FOR PROJECT MANAGEMENT
#+begin_src emacs-lisp
    (use-package projectile
      :config (setq projectile-indexing-method 'alien
    		projectile-globally-ignored-directories '("target" "node_modules")
    		projectile-enable-caching t
    		projectile-file-exists-remote-cache-expire nil)
      (my/leader-keys
        "p" '(projectile-command-map :wk "Projectile"))
      :init (projectile-mode +1))
#+end_src
* GC 
#+begin_src emacs-lisp
    (use-package esup
      :ensure t
      :defer t)

    (use-package memory-usage
      :ensure t
      :defer t
      :commands memory-usage)
#+end_src

* UI
** FONTS AND THEME
#+begin_src emacs-lisp
  (use-package doom-themes
    :config (load-theme 'doom-one t))

  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom (doom-modeline-height 18))
    
#+end_src
** HEIGHLIGHT TODO LIST
#+begin_src emacs-lisp
  (use-package hl-todo
    :ensure t
    :defer t
    :hook ((org-mode . hl-todo-mode)
           (prog-mode . hl-todo-mode))
    :config
    (setq hl-todo-highlight-punctuation ":"
          hl-todo-keyword-faces
          `(("TODO"       warning bold)
            ("FIXME"      error bold)
            ("HACK"       font-lock-constant-face bold)
            ("REVIEW"     font-lock-keyword-face bold)
            ("NOTE"       success bold)
            ("DEPRECATED" font-lock-doc-face bold))))
#+end_src
** RAINBOW
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :defer 10
  :config
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+end_src
** INDENT-GUIDES
#+begin_src emacs-lisp
(use-package indent-bars
  :ensure (indent-bars :type git :host github :repo "jdtsmith/indent-bars")
  :defer 10
  :hook (prog-mode . indent-bars-mode)
  :config
  (setq indent-bars-prefer-character "|"))
  (setopt indent-bars-ts-color '(inherit unspecified :blend 0.15))
#+end_src
** ICONS
#+begin_src emacs-lisp
    (use-package all-the-icons
      :ensure t)

    (use-package nerd-icons
      :ensure t)

    (use-package nerd-icons-completion
      :after marginalia
      :config
      (nerd-icons-completion-mode)
      (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup))

    (use-package nerd-icons-ibuffer
      :ensure t
      :defer 35
      :hook (ibuffer-mode . nerd-icons-ibuffer-mode))

    ;; (use-package nerd-icons-corfu
    ;;   :ensure t
    ;;   :config
    ;;   (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))

    (use-package kind-icon
      :ensure t
      :after corfu
  ;;  :custom
      ;; (kind-icon-blend-background t)
      ;; (kind-icon-default-face 'corfu-default) ; only needed with blend-background
       :config
      (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src
** POPPER
#+begin_src emacs-lisp
  (use-package popper
    :ensure t
    :defer 5
    :bind (("M-`"   . popper-toggle)
           ("C-`"   . popper-cycle)
           ("M-o" . popper-toggle-type)
           ("M-q"     . popper-kill-latest-popup))
    :init
    (setq popper-reference-buffers
          '("\\*Messages\\*"
            "Output\\*$"
            "\\*Async Shell Command\\*"
              "*Flymake diagnostics.*"
              "\\*eldoc\\*"
              "\\*compilation\\*"
              "\\*rustic-"
              "^*tex"
              "\\*Ement Notifications\\*"
              "Output\\*$"
              "\\*Async Shell Command\\*"
              "\\*Dtache Shell Command\\*"
              "\\*mu4e-update\\*"
              "\\*GDB.*out\\*"
              "\\*Warnings\\*"
              "\\*cargo-run\\*"
              "\\*vterm\\*"
            help-mode
            compilation-mode))
    (popper-mode +1)
    (popper-echo-mode +1))                ; For echo area hints
#+end_src
* UTILITIES
** git
#+begin_src emacs-lisp
  (use-package git-link
    :ensure t)

  (use-package magit
    :ensure t)

  (use-package magit-section
    :ensure t)

  (use-package git-gutter 
    :ensure t
    :config
    (setq git-gutter:window-width 1)
    :init
    (global-git-gutter-mode))

  (use-package git-timemachine)
#+end_src
** VTERM
#+begin_src emacs-lisp
  (use-package vterm
    :defer 15
    :bind (:map vterm-mode-map
                ("M-j" . consult-buffer))
    :config
    (setq shell-file-name "/bin/sh"
          vterm-max-scrollback 5000)
    (my/leader-keys
      "o v" '(vterm :wk "Vterm Toggle")))

  (use-package vterm-toggle
    :ensure t
    :after vterm
    :config
    (my/leader-keys
      "t v" '(vterm-toggle :wk "Vterm Toggle")))
#+end_src

